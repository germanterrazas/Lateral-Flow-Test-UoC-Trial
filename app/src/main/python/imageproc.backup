import cv2
import numpy as np
from os.path import dirname, join
from PIL import Image
import base64
import io

def processImg(kotlinByteArrayStr):

    decoded_data = base64.b64decode(kotlinByteArrayStr)
    np_data = np.fromstring(decoded_data,np.uint8)
    img = cv2.imdecode(np_data,cv2.IMREAD_UNCHANGED)

    #img_gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    #pil_im = Image.fromarray(img_gray)

    #buff = io.BytesIO()
    #pil_im.save(buff,format=“PNG”)
    #img_str = base64.b64decode(buff.getvalue())

    #return ""+str(img_str,'utf-8')

    #filename = join(dirname(__file__), "cat.jpg")

    #arr = bytes(string, 'utf-8')

    #img = cv2.imread(filename)

    if np.shape(img) == (): 
        return 'Image could not be read'

    h, w, c = img.shape

    returnToKotlin = [True, "W40001231D", "Negative"]
    return returnToKotlin

    # minimum value of brown pixel in BGR order -> burleywood
    BROWN_MIN = np.array([135, 184, 222], np.uint8)
    # maximum value of brown pixel in BGR order -> brown
    BROWN_MAX = np.array([42, 42, 65], np.uint8)

    dst = cv2.inRange(img, BROWN_MIN, BROWN_MIN)
    no_brown = cv2.countNonZero(dst)
    return str(no_brown)
